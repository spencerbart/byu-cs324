1. socket and connect
2. You could use the sendto() or sendmsg() function to send messages via UDP
3. The strings written to the socket come from the write() command
4. All ports are the same when running the client once
5. It uses a different port for each socket when hitting it multiple times
6. One socket was used for all clients
7. There was 3 total calls to the write() function on the client
8. All 3 messages were received by the kernal
9. 3 calls to recvfrom() were called to process all the messages
10. recvfrom can only read in one packet. When the packet is smaller than the passed buffer, only that much data is returned.
11. The second socket that is generated by accept is being used and not in a passive state listening for new requests.
12. UDP connection simply sends the data and doesn't care if the data actually got there. TCP on the other hand actaully establishes a connection where it confirms whether or not the recepient got the data.
13. TCP connections establish a connection between the client and the server so that they can verify receipt after send. It moves the connection to a new port so that it can wait for messages to be sent.
14. Messages sent using the same socket use the same port
15. Multiple messages being sent use different ports
16. Multiple sockets can be used to receive requests. This is different that UDP because TCP moves the connection to a new socket.
17. 3 write calls were made by the client
18. 3 messages were received by the server
19. There was only 1 call to recv() and it read all 15 bytes.
20. TCP does not preserve record boundaries.
21. 
22.
23.
24.
25.
26.
27.
28.
